name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      shell: bash
    
    - name: Test CLI functionality
      run: |
        python main.py --no-banner &
        sleep 2
        pkill -f "python main.py" || true
      shell: bash
      if: runner.os != 'Windows'
    
    - name: Test CLI functionality (Windows)
      run: |
        Start-Process python -ArgumentList "main.py --no-banner" -PassThru
        Start-Sleep 2
        Get-Process python -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
      shell: pwsh
      if: runner.os == 'Windows'
    
    - name: Test GUI imports (without display)
      run: |
        python -c "
        import sys
        sys.argv = ['gui.py']
        try:
            import gui
            print('GUI imports successful')
        except Exception as e:
            if 'DISPLAY' in str(e) or 'Tcl' in str(e):
                print('GUI import test passed (no display available)')
            else:
                raise e
        "
    
    - name: Test cloud sync imports
      run: |
        python -c "
        import sys
        sys.argv = ['cloud_sync.py']
        try:
            import cloud_sync
            print('Cloud sync imports successful')
        except Exception as e:
            if 'DISPLAY' in str(e) or 'Tcl' in str(e):
                print('Cloud sync import test passed (no display available)')
            else:
                raise e
        "
    
    - name: Test standalone version
      run: |
        python -c "import pytodo_standalone; print('Standalone version imports successful')"

  build:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
    
    - name: Build executable (Windows)
      if: runner.os == 'Windows'
      run: |
        python build.py
        dir dist
    
    - name: Build executable (Linux)
      if: runner.os == 'Linux'
      run: |
        python build.py
        chmod +x build_deb.sh
        ./build_deb.sh
        ls -la dist/
        ls -la release/
    
    - name: Upload Windows artifacts
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v3
      with:
        name: pytodo-windows-exe
        path: dist/PyTo-Do.exe
    
    - name: Upload Linux artifacts
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v3
      with:
        name: pytodo-linux-binaries
        path: |
          dist/PyTo-Do
          release/*.deb

  release:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          pytodo-windows-exe/PyTo-Do.exe
          pytodo-linux-binaries/PyTo-Do
          pytodo-linux-binaries/*.deb
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
